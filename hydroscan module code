// this is just a smaple code as currently we are working on improvment

#include <SPI.h>
#include <LoRa.h>
#include <DHT.h>      // Library for DHT11/22 sensor (temperature & humidity)
#include <Wire.h>

// LoRa module pin configuration
#define LORA_SS 18
#define LORA_RST 14
#define LORA_DIO0 26

// DHT sensor setup
#define DHTPIN 4        // Pin connected to DHT11/22
#define DHTTYPE DHT22   // DHT 11 or DHT 22
DHT dht(DHTPIN, DHTTYPE);

// Sensor pins for analog sensors
int pHpin = 34;           // Analog pin for pH sensor
int tdsPin = 35;          // Analog pin for TDS sensor
int turbidityPin = 32;    // Analog pin for turbidity sensor

// Variables to store sensor data
float temperature, humidity, pHValue, tdsValue, turbidityValue;

// Setup function runs once when the microcontroller powers on or resets
void setup() {
  // Initialize serial communication at 115200 baud rate
  Serial.begin(115200);
  
  // Initialize DHT sensor
  dht.begin();
  
  // Initialize LoRa communication
  Serial.println("Initializing LoRa module...");
  LoRa.setPins(LORA_SS, LORA_RST, LORA_DIO0);
  if (!LoRa.begin(915E6)) {  // Set LoRa frequency to 915 MHz (adjust according to your region)
    Serial.println("LoRa init failed. Check your connections.");
    while (true); // Stop the program if LoRa initialization fails
  }
  Serial.println("LoRa Initialized.");
  
  // Additional setup code (if necessary)
}

// Function to read sensor data
void readSensorData() {
  // Reading temperature and humidity from DHT sensor
  temperature = dht.readTemperature();
  humidity = dht.readHumidity();
  
  // If the DHT sensor fails, handle error
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
  }

  // Reading pH, TDS, and turbidity values from analog pins
  pHValue = analogRead(pHpin) * (5.0 / 4096.0);  // Convert analog value to voltage
  tdsValue = analogRead(tdsPin);  // Direct analog read, apply calibration if necessary
  turbidityValue = analogRead(turbidityPin);  // Same for turbidity sensor
  
  // Debugging the values
  Serial.println("Sensor Data:");
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println("Â°C");
  
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println("%");

  Serial.print("pH: ");
  Serial.print(pHValue);
  Serial.println(" (voltage)");

  Serial.print("TDS: ");
  Serial.print(tdsValue);
  Serial.println(" (raw)");

  Serial.print("Turbidity: ");
  Serial.print(turbidityValue);
  Serial.println(" (raw)");
}

// Function to transmit data via LoRa
void transmitData() {
  // Structure data in a JSON-like format (as a string)
  String dataPacket = "{";
  dataPacket += "\"temperature\":" + String(temperature, 2) + ",";
  dataPacket += "\"humidity\":" + String(humidity, 2) + ",";
  dataPacket += "\"pH\":" + String(pHValue, 2) + ",";
  dataPacket += "\"TDS\":" + String(tdsValue) + ",";
  dataPacket += "\"turbidity\":" + String(turbidityValue);
  dataPacket += "}";

  // Begin the LoRa packet
  LoRa.beginPacket();
  
  // Send the data string via LoRa
  LoRa.print(dataPacket);
  
  // End the packet and transmit
  LoRa.endPacket();

  // Print data for debugging
  Serial.println("Data sent via LoRa:");
  Serial.println(dataPacket);
}

void loop() {
  // Read the sensor data
  readSensorData();

  // Transmit the sensor data
  transmitData();
  
  // Wait before sending the next packet (2 seconds delay)
  delay(2000);
}
